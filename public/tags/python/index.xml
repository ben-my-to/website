<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Jason Duong</title>
    <link>https://michaelneuper.github.io/hugo-texify3/tags/python/</link>
    <description>Recent content in Python on Jason Duong</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>duongjason11@gmail.com (Jason Duong)</managingEditor>
    <webMaster>duongjason11@gmail.com (Jason Duong)</webMaster>
    <lastBuildDate>Thu, 02 Jan 2025 03:58:17 -0800</lastBuildDate>
    <atom:link href="https://michaelneuper.github.io/hugo-texify3/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Parallel Decision Tree Classifier</title>
      <link>https://michaelneuper.github.io/hugo-texify3/posts/mpitree-project/</link>
      <pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate><author>duongjason11@gmail.com (Jason Duong)</author>
      <guid>https://michaelneuper.github.io/hugo-texify3/posts/mpitree-project/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/jasonduong11/mpitree&#34;&gt;Link to Source Code&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;try-it-out1&#34;&gt;Try it Out!&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;&#xA;&lt;iframe width=&#34;803.5&#34; height=&#34;445.5&#34; src=&#34;https://editor.p5js.org/ben-my-to/full/BhAJPmrSD&#34;&gt;&lt;/iframe&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;A &lt;strong&gt;Decision Tree&lt;/strong&gt; is an $n$-nary tree where each node represents a feature &lt;em&gt;(interior nodes)&lt;/em&gt; or response &lt;em&gt;(terminal/leaf nodes)&lt;/em&gt; value, and each branch represents a condition on some feature. Decision Trees are intuitive &lt;em&gt;supervised&lt;/em&gt; machine learning algorithms for classification and regression problems. Decision Trees behave by posing questions about the data to narrow their choices until they are somewhat confident in their predictions. The fundamental procedure for a decision tree involves recursively querying each feature and partitioning the dataset and feature space into disjoint subsets and regions until there is no ambiguity about the response variable. The primary goal of any machine learning model is &lt;em&gt;generalization&lt;/em&gt; &amp;ndash; the model&amp;rsquo;s ability to perform well on future, unseen data. Therefore, the general approach to learning an optimal decision tree involves asking &amp;ldquo;good&amp;rdquo; questions &lt;em&gt;(the features that maximize the information gain&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;)&lt;/em&gt; about the data that leads to the most certainty about the response variable each time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blackjack Game Simulator</title>
      <link>https://michaelneuper.github.io/hugo-texify3/posts/blackjack-game-project/</link>
      <pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate><author>duongjason11@gmail.com (Jason Duong)</author>
      <guid>https://michaelneuper.github.io/hugo-texify3/posts/blackjack-game-project/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/jasonduong11/CPSC-386/tree/main/projects/blackjack&#34;&gt;Link to Source Code&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Blackjack&lt;/strong&gt; is a casino banking game where players compete against the house or casino to obtain the best hand of cards. Unlike many other familiar card games, the players do not compete against each other or collaborate. The game is played using one or more decks of common playing cards, also known as French decks.&lt;/p&gt;&#xA;&lt;p&gt;In the game, the dealer represents the house/bank/casino. There must be at least one player. The dealer shuffles 8 decks of cards and cuts the deck. A &lt;em&gt;cut card&lt;/em&gt; is placed randomly between the 60th and 80th card from the bottom of the deck. All the cards are placed in a &lt;a href=&#34;https://en.wikipedia.org/wiki/Shoe_(cards)&#34;&gt;&lt;em&gt;shoe&lt;/em&gt;&lt;/a&gt; which the dealer uses to deal cards one at a time. When the dealer reaches the &lt;em&gt;cut card&lt;/em&gt;, then, when the game ends, the cards are shuffled, cut, a &lt;em&gt;cut card&lt;/em&gt; is placed and the cards are returned to the &lt;em&gt;shoe&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
